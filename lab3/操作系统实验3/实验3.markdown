### 操作系统原理与设计 2022春 (011174.01)实验报告

## 实验3 shell&Interrupt&timer

- 软件框图

  本次实验中我没有对实验框架作出太多改动，经对比，实际实现框图只需要在老师PPT基础上加以修改即可。

  ```mermaid
  graph TD
  A[userapp: MyMain]
  A-->C
  C[OS: MultiBootHeader.S->.c]
  D[OS: OSstart]
  C-->D
  E[OS: myPrintk]
  D-->E
  F[VGA]
  G[UART]
  E-->F
  E-->G
  H[Hardware: VGA/UART]
  F-->H
  G-->H

  N1[Hardware: i8253/8259]
  N2[clock]
  N3[Time interrupt]
  N1-->N2
  N2-->N3
  N3-->E

  M1[shell]
  M2[MyMain]
  D-->M2
  M2-->M1
  M1-->E

  X[Other interrupt]
  X-->E
  X1[KeyBoard]
  X1-->X
  X2[Others]
  X2-->X
  ```

- 软件启动

  本次实验一直到清零bss段都与上一次相同。随后程序建立中断向量表（都是汇编代码形式），并确保程序在出现时钟中断或其他中断时能够响应。

  ```assembly
  time_interrupt:
  	cld
  	pushf
  	pusha
  	call tick
  	popa
  	popf
  	iret
  	
  	.p2align 4
  ignore_int1:
  	cld
  	pusha
  	call ignoreIntBody
  	popa
  	iret
  ```

  这两段指明了发生时间中断和其他中断时的函数调用（分别为tick函数和ignoreIntBody函数）。

  完成建立之后，程序进入osStart.c里的osStart函数运行。这个函数首先建立时钟（进行硬件初始化，通过内嵌汇编完成），并进行最初的一次tick调用使得初始时间显示出来。调用enable_interrupt，允许中断运行。这个与之前见过的汇编调用C函数相反，这次是C函数调用汇编。这个汇编在irq.S内，根据老师和助教的提示，能够很容易写出来。

  随后程序进入测试样例，启动shell，运行时钟显示。


```mermaid
graph TD
A[MultibootHeader.S]
A-->B
B[call _start:start32.S]
B-->C
C[call osStart:osStart.c]
C-->D
D[clear_screen]
DD[start shell]
DDD[wall clock]
D-->DD
D-->DDD
DD-->E
DDD-->E
E[MyPrintk]
E-->F
F[MyMain]
F-->G
G[MyPrintk]
G-->H
H[while 1]
I[inb]
J[outb]
I-->D
I-->E
I-->F
I-->G
I-->DD
I-->DDD
DD-->J
DDD-->J
D-->J
E-->J
F-->J
G-->J
```

- 主要模块及其实现

  - 已有的代码框架没有做过多改动，在此不再赘述。

  - myOS/dev/i8253.c 和 myOS/dev/i8259A.c

    结合上次实验的内容，我们可以知道，这一部分主要根据给出的PPT的讲解进行端口输出。PPT的暗示很明显，只需要将所有的向右的箭头两边填入outb的参数即可。

    ```c
    //myOS/dev/i8253.c
    void init8253(void){
    	//finished
    	outb(0x0043,0x34);//init port
    	outb(0x0040,0x9C);//lower of 0x2E9C=11932
    	outb(0X0040,0X2E);//higher of 0x2E9C
    	return;
    }
    ```

    其中向端口0x0040输出的两个数字结合成为11392，可以给时钟降频为大约100Hz，从而满足题目要求。

    ```c
    //myOS/dev/i8259A.c
    void init8259A(void){
    	//finished
    	//shield interrupt
    	outb(0x0021,0xFF);
    	outb(0x00A1,0XFF);
    	//master init
    	outb(0x0020,0x11);
    	outb(0x0021,0x20);
    	outb(0x0021,0x04);
    	outb(0x0021,0x3);
    	//slave init
    	outb(0x00A0,0X11);
    	outb(0x00A1,0x28);
    	outb(0x00A1,0X02);
    	outb(0x00A1,0X01);
    	return;
    }
    ```

    这个文件按PPT来就行了。

  - myOS/i386/irq.s

    ~~由于助教说了只有四行，且每个都是函数调用，所以在最后填入ret后只剩下了两行，这两行~~根据语义就可以猜出来是中断启动和关闭的指令。代码如下：

    ```assembly
    ;myOS/i386/irq.s
    .text
    .code32
    _start:
    	.globl enable_interrupt
    enable_interrupt:
    	sti
    	ret
    	
    	.globl disable_interrupt
    disable_interrupt:
    	cli
    	ret
    ```

  - myOS/kernel/tick.c

    这里边的函数名比较复杂，且绕来绕去的。与某个助教商量后也没啥明确结果，但是可以肯定的是，一个用来处理时钟，另一个用来输出。此处根据语义猜测tick.c用于更新时钟。由于这个函数被调用的频率为100Hz（根据start32.S和上边的编写可以猜测得到），因此需要使用一个毫秒使得频率降为1Hz，这个毫秒标志适合使用全局变量或静态变量。结果如下：

    ```c
    //myOS/kernel/tick.c
    void tick(void){
    	//finished
    	static int millisecond=0;//100 per second

    	//when turns to 0, a new second
    	if(millisecond==0||system_ticks==1){
    		oneTickUpdateWallClock(HH, MM, SS);//display time
    	}

    	//new millisecond
    	millisecond++;
    	system_ticks++;//called times
    	//new second
    	if(millisecond>=100){
    		millisecond-=100;
    		SS++;
    		if(SS>=60){
    			SS=SS-60;
    			MM++;
    		}
    		if(MM>=60){
    			MM=MM-60;
    			HH++;
    		}
    	}
    	return;
    }
    ```

  - myOS/kernel/wallClock.c

    ```c
    //myOS/kernel/wallClock.c
    void setWallClock(int HH, int MM, int SS) {
        //你需要填写这里
        // finished?
        unsigned short *p = (unsigned short *)VGA_BASE;
        p += (START_POS);
        char buf[12] = {0};
        buf[0] = HH / 10 + '0';
        buf[1] = HH % 10 + '0';
        buf[2] = ':';
        buf[3] = MM / 10 + '0';
        buf[4] = MM % 10 + '0';
        buf[5] = ':';
        buf[6] = SS / 10 + '0';
        buf[7] = SS % 10 + '0';
        buf[8] = ' ';
        buf[9] = 0;
        for (int i = 0; i < 9; i++) p[i] = (COLOR << 8) | (buf[i]);
        return;
    }

    void getWallClock(int *HH, int *MM, int *SS) {
        //你需要填写这里
        // finished?
        unsigned short *p = (unsigned short *)VGA_BASE;
        p += (START_POS);
        *HH = ((p[0] - '0') & 0x00FF) * 10 + (p[1] - '0') & 0x00FF;
        *MM = ((p[3] - '0') & 0x00FF) * 10 + (p[4] - '0') & 0x00FF;
        *SS = ((p[6] - '0') & 0x00FF) * 10 + (p[7] - '0') & 0x00FF;
        return;
    }
    ```

    根据安排使用这样的方式处理实验要求。而且显示的时候为了整齐，没有使用myPrintk函数，毕竟代码框架中这个函数不支持位宽设定，我也只是加上了%s功能。就是不知道为什么要用这么奇怪的方式读取时钟（要是实验没说使用VGA显存内容读取时钟，我就加个tick.h读全局变量了。而且这个函数似乎就没被调用过。）。

    以上内容完成后，经过若干次调试，时钟能够正常运行。

  - userApp/startShell.c

    这个算是实验中最容易理解但是代码量最大的一部分了。我除了实验的要求，我还加上了：

    - 对于溢出的处理（给出的args最多容纳8个7字符参数，超过容量可以进行处理）

    - 我能想到的大部分输入边界条件（比如加上一堆空格制表，以及前后都加上空白字符）

    - 非法指令的处理（指令不存在或参数错误，用红色字体显示）

    - 一条exit指令（可以退出shell，同时改动了代码框架中的myMain，在最后添上了关闭中断的函数disable_interrupt）。

    - 在uart上敲击键盘时，不仅能在uart上回显，还能再vga上回显。

    - 因为改动比较大，所以把这个文件的框架改的面目全非的，我主要指顺序和startShell中已完成部分的部分修改。

      我还想处理一下退格来着（之前做过类似的命令行），后来没做。

    首先我们需要对输入字符进行分割处理，这里使用以下函数：

    ```c
    //_isspace和spilt
    int _isspace(char ch) {
    	if (ch == ' ' || ch == '\t')
    		return 1;
    	else
    		return 0;
    }

    int spilt(const char* const buffer, char arr[8][8]) {  // return argc
    	if (buffer[0] == 0) return -1;                     // empty string

    	int argc = 0, index = 0, count = 0;

    	while (_isspace(buffer[count]) && count <= 255)
    		count++;  // clean the first spaces of the buffer

    	if (count == 256 || buffer[count] == 0) return -1;  // syntax error

    	for (; count <= 255 && buffer[count] != 0 && argc <= 7; count++) {
    		if (_isspace(buffer[count])) {  // deal with space
    			arr[argc][index] = 0;       // end the string
    			while (_isspace(buffer[count]))
    				count++;  // goto next pos of
    						  // no-space
    			if (buffer[count] == 0)
    				return ++argc;  // if end, return

    			else {  // not end
    				argc++;
    				index = 0;
    				if (argc == 8) return -1;  // if more args than allowed
    			}
    		}
    		arr[argc][index] = buffer[count];
    		index++;
    		if (index == 8) return -1;  // if more chars than allowed
    	}
    	arr[argc][count + 1] = 0;
    	return ++argc;
    }

    ```

    spilt返回参数数目，正常取值为1到8，错误返回-1以供被调函数处理。~~要是能用C++的stringstream多好，可惜那样不好编译链接~~

    定义两个宏，分别表示Error输出颜色和退出shell的特殊返回值：

    ```c
    #define ERRCOLOR 	0x04
    #define EXIT_SIGNAL	0x00FF
    ```

    考虑到要处理非法指令，所以我添加了一个myCommand专门用于处理非法指令：

    ```c
    // one special command, should be listed at the last
    int func_not_found(int argc, char (*argv)[8]) {  // illegal command
    	myPrintk(ERRCOLOR, "Error: your input \"%s\" is not a correct command.\n\n",
    			 argv[0]);
    }
    myCommand not_found = {"not found\0", "Not a command.\0", func_not_found};
    ```

    添加了一个叫EXIT（为了与stdlib的exit区分）的myCommand处理退出：

    ```c
    int func_exit(int argc, char (*argv)[8]) {
    	if (argc == 1) {
    		return EXIT_SIGNAL;  // shutdown the shell
    	} else {
    		myPrintk(ERRCOLOR, "Error: exit: illegal number of args.\n\n");
    		return -1;
    	}
    }
    myCommand EXIT = {"exit\0", "shut off the shell\n\0", func_exit};
    ```

    同时写了一个指针数组列表用于存储各种myCommand，增加了一个对应的全局常量表示其大小，添加一个函数用来查找指令序号，查找使用的、自己写的strcmp也一并列出来。这样操作便于添加新的指令：

    ```c
    int strcmp(const char* a, const char* b) {
    	while ((*a != 0) && (*b != 0)) {
    		if ((*a) != (*b)) return (int)(*a - *b);
    		a++;
    		b++;
    	}
    	return (int)(*a - *b);
    }
    myCommand* cmdlist[] = {&cmd, &EXIT, &help, &not_found};  // command list
    const int cmdnum = sizeof(cmdlist) / sizeof(myCommand*);  // command number
    int cmdfinder(const char* const cmd) {
    	for (int i = 0; i < cmdnum; i++) {
    		if (strcmp(cmd, cmdlist[i]->name) == 0) return i;
    	}
    	return (int)(cmdnum - 1);  // not find,return no command
    }
    ```

    为了满足调用关系，并使得程序框架更清晰，这个文件内我多次使用了先声明后定义的方法。现在我们可以开始定义之前的函数了：

    ```c
    int func_help(int argc, char (*argv)[8]) {
    	// finished
    	if (argc == 1) {  // only one arg
    		myPrintk(0x07, "%s\n", help.help_content);
    		return 0;
    	} else if (argc == 2) {  // two args to display
    		int order = cmdfinder(argv[1]);
    		if (order != (cmdnum - 1)) {
    			myPrintk(0x07, "%s\n", cmdlist[order]->help_content);
    			return 0;
    		} else {  // not a command
    			myPrintk(ERRCOLOR,
    					 "Error: help: your input \"%s\" is not a correct "
    					 "command.\n\n",
    					 argv[1]);
    			return -1;
    		}
    	} else {  // arg num error
    		myPrintk(ERRCOLOR, "Error: help: illegal number of args.\n\n");
    		return -1;
    	}
    }
    int func_cmd(int argc, char (*argv)[8]) {
    	// finished
    	if (argc == 1) {
    		myPrintk(0x07, "All commands listed:\n");
    		// list commands
    		for (int i = 0; i < cmdnum - 1; i++)
    			myPrintk(0x03, "%s\n",
    					 cmdlist[i]->name);  // display all commands in blue

    		myPrintk(0x07, "\n");
    		return 0;
    	} else {  // arg error
    		myPrintk(ERRCOLOR, "Error: cmd: illegal number of args.\n\n");
    		return -1;
    	}
    }
    ```

    现在，我们终于可以定义最后的shell函数了。这里为了美观，student后两个提示符后边我添加了一个空格，对运行并没有多大影响。

    ```c
    void startShell(void) {
    	//我们通过串口来实现数据的输入
    	// finished

    	do {
    		char BUF[256] = {0};  //输入缓存区
    		int BUF_len = 0;      //输入缓存区的长度

    		int argc = 0;
    		char argv[8][8] = {0};
    		BUF_len = 0;
    		myPrintk(0x07, "Student>> \0");
    		while ((BUF[BUF_len] = uart_get_char()) != '\r') {
    			uart_put_char(BUF[BUF_len]);  //将串口输入的数存入BUF数组中
    			append_char_to_screen(BUF[BUF_len], 0x07);
    			BUF_len++;  // BUF数组的长度加
    		}
    		append_char_to_screen('\n', 0x07);
    		BUF[BUF_len] = 0;  // end the string

    		uart_put_chars(" -pseudo_terminal\0");
    		uart_put_char('\n');

    		// myPrintk(0x07,"%s\n",BUF);

    		argc = spilt(BUF, argv);
    		if (argc <= 0) {
    			myPrintk(ERRCOLOR, "Error: command cannot be dealt.\n\n");
    		} else {
    			int order = cmdfinder(argv[0]);
    			if (cmdlist[order]->func(argc, argv) == EXIT_SIGNAL) return;
    		}

    		// OK,助教已经帮助你们实现了“从串口中读取数据存储到BUF数组中”的任务，接下来你们要做
    		//的就是对BUF数组中存储的数据进行处理(也即，从BUF数组中提取相应的argc和argv参
    		//数)，再根据argc和argv，寻找相应的myCommand
    		//***实例，进行***.func(argc,argv)函数 调用。

    		//比如BUF中的内容为 “help cmd”
    		//那么此时的argc为2 argv[0]为help argv[1]为cmd
    		//接下来就是 help.func(argc, argv)进行函数调用即可

    		//谢谢助教

    	} while (1);
    }
    ```

- 目录组织和makefile组织

  - 目录组织和刚接到的代码框架也没啥不同的，除了多出来一些编译后的内容。

    ```bash
    .
    ├── compile_flags.txt
    ├── Makefile
    ├── multibootheader
    │   └── multibootHeader.S
    ├── myOS
    │   ├── dev
    │   │   ├── i8253.c
    │   │   ├── i8259A.c
    │   │   ├── Makefile
    │   │   ├── uart.c
    │   │   └── vga.c
    │   ├── i386
    │   │   ├── io.c
    │   │   ├── irq.S
    │   │   ├── irqs.c
    │   │   └── Makefile
    │   ├── include
    │   │   ├── i8253.h
    │   │   ├── i8259A.h
    │   │   ├── io.h
    │   │   ├── irqs.h
    │   │   ├── myPrintk.h
    │   │   ├── tick.h
    │   │   ├── uart.h
    │   │   ├── vga.h
    │   │   ├── vsprintf.h
    │   │   └── wallClock.h
    │   ├── kernel
    │   │   ├── Makefile
    │   │   ├── tick.c
    │   │   └── wallClock.c
    │   ├── Makefile
    │   ├── myOS.ld
    │   ├── osStart.c
    │   ├── printk
    │   │   ├── Makefile
    │   │   ├── myPrintk.c
    │   │   └── vsprintf.c
    │   └── start32.S
    ├── output
    │   ├── multibootheader
    │   │   └── multibootHeader.o
    │   ├── myOS
    │   │   ├── dev
    │   │   │   ├── i8253.o
    │   │   │   ├── i8259A.o
    │   │   │   ├── uart.o
    │   │   │   └── vga.o
    │   │   ├── i386
    │   │   │   ├── io.o
    │   │   │   ├── irq.o
    │   │   │   └── irqs.o
    │   │   ├── kernel
    │   │   │   ├── tick.o
    │   │   │   └── wallClock.o
    │   │   ├── osStart.o
    │   │   ├── printk
    │   │   │   ├── myPrintk.o
    │   │   │   └── vsprintf.o
    │   │   └── start32.o
    │   ├── myOS.elf
    │   └── userApp
    │       ├── main.o
    │       └── startShell.o
    ├── source2run.sh
    └── userApp
        ├── main.c
        ├── Makefile
        └── startShell.c

    16 directories, 53 files
    ```

  - Makefile组织

    ```bash
    .
    ├── MULTI_BOOT_HEADER
    │   └── output/multibootheader/multibootHeader.o
    ├── MYOS_OBJS
    │   ├── DEV_OBJS
    │   │   ├── output/myOS/dev/i8253.o
    │   │   ├── output/myOS/dev/18259A.o
    │   │   ├── output/myOS/dev/uart.o
    │   │   └── output/myOS/dev/vga.o
    │   ├── I386_OBJS
    │   │   ├── output/myOS/i386/irq.o
    │   │   ├── output/myOS/i386/irqs.o
    │   │   └── output/myOS/i386/io.o
    │   ├── KERNEL_OBJS
    │   │   ├── output/myOS/KERNEL/wallclock.o
    │   │   └── output/myOS/KERNEL/tick.o
    │   ├── osStart.o
    │   ├── PRINTK_OBJS
    │   │   ├── output/myOS/printk/vsprintf.o
    │   │   └── output/myOS/printk/myPrintk.o
    │   ├── output/myOS/start32.o
    │   └── output/myOS/osStart.o
    ├── output/myOS.elf
    └── USER_APP_OBJS
        ├── output/userApp/main.o
        └── output/userApp/startShell.o
    ```

- 代码布局说明

  阅读myOS.ld可以发现：

  - MultibootHeader起始地址为	a1=1M
  - 其中的.text部分起始地址为          a2=a1+sizeof(MultibootHeader)补足至8字节对齐，各段代码16字节对齐补足到后边。
  - .data部分为                                    a3=a2+sizeof(text)补足至16字节对齐
  - .bss部分为                                      a4=__bss_start=a3+sizeof(data)补足至16字节对齐
  - 操作系统结束位置为_end，地址为__bss_end补足至16字节对齐。后面以512字节对齐。

- 编译过程说明

  与给出方法相同，不过我实际上是使用鼠标双击.sh文件直接编译的。（双击makefile似乎也可以）

  编译的大致过程：第一步，编译各个文件，生成相应的 .o 目标文件；第二步，根据链接描述文件的依赖关系，将各 .o 目标文件进行链接，生成 myOS.elf 文件，这个文件可以给qemu执行。

- 运行和运行结果说明

  输入

  ```bash
  sh source2run.sh
  ```

  编译并运行qemu，不过此时的qemu并不能够进行命令行操作。阅读终端给出的信息：

  ```bash
  $ sh source2run.sh
  source2run.sh: 2: shell: not found

  rm -rf output
  ld -n -T myOS/myOS.ld output/multibootheader/multibootHeader.o output/myOS/start32.o output/myOS/osStart.o output/myOS/dev/uart.o output/myOS/dev/vga.o output/myOS/dev/i8259A.o output/myOS/dev/i8253.o output/myOS/i386/io.o output/myOS/i386/irqs.o output/myOS/i386/irq.o output/myOS/printk/myPrintk.o output/myOS/printk/vsprintf.o output/myOS/kernel/tick.o output/myOS/kernel/wallClock.o output/userApp/main.o output/userApp/startShell.o -o output/myOS.elf
  make succeed
  $ char device redirected to /dev/pts/4 (label serial0)
  ```

  （据助教说第一行的错误不用管他）根据实验文档，可以发现uart被重定向到了/dev/pts/4内（可以在对应文件夹内找到这个文件，不过不知道怎么打开），于是我们接着输入：

  ```bash
  sudo screen /dev/pts/4
  ```

  （我这不写个sudo就提示权限不足）

  进入命令行操作状态。我们依次尝试以下输入正常的指令（tab键在uart上可以正常回显，在VGA上输出一个圈，不过在分割字符串的时候，我的函数仍可以正常处理）：

  ```bash
  cmd
  help
  help help
  	help 	 cmd
       help    exit       
  exit
  ```

  结果如下：

  ![301](D:\节省桌面空间从我做起\U盘\立方烷\立方烷\操作系统课件\操作系统实验3\301.png)

  可见，所有正常指令满足设计要求，且关闭后各种中断均无效。

  接下来开始测试非法指令（#后边的为注释，并不输入）：

  ```bash
  cmd arg1				#more args for cmd
  help arg1 arg2			#more args for help
  help noexist			#command not exist
  exit arg1 arg2 arg3		#more args for exit
  nocmd					#command not exist
  toooooolong				#one arg length exceed
  t o o m a n y a r g s	#arg number exceed
  						#empty without space
  						#empty with space
  ```

  结果：

  ![302](D:\节省桌面空间从我做起\U盘\立方烷\立方烷\操作系统课件\操作系统实验3\302.png)

  可见，测试的不正常指令都能够正常报错。

- 遇到的问题和解决方案

  本次实验是在上一次实验基础上的提升，有一定难度。但是知道了自己要做什么之后，其实实现起来不难。阅读实验文档可以帮助，但是不能完全让我们知道需要做什么。很多东西需要自行体会。

  其中tick函数里，最初的if只设定条件：`if(millisecond==0)` ，但是这样最初的一秒并不能显示。于是添加条件为：`if(millisecond==0||system_ticks==0)` ，仍不能显示。于是我怀疑makefile里的编译器优化把递增调到了这个前面，但是关闭优化后仍然没有用。随后修改为：`if(millisecond==0||system_ticks==1)` ，即可正常显示。

